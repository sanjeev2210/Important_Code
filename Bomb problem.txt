/*	ANKAM NIKHIL */
#include<iostream>

using namespace std;

int n;
int ans ;

void backtrack(int grid[][5], int clvl, int sPos, int bomb, int coins){
	// cout<<clvl<<endl;
	if(clvl==-1){
		ans = max(ans, coins);
		return ;
	}
	for(int i=0;i<5;i++){
		if(grid[clvl][i]==2){
			ans = max(ans, coins);
			return ;
		}
	}

	
	if(bomb==1){		//if bomb is available to use
		int cl = clvl;
		while(cl>=0 && cl>(clvl-5)){
			for(int itr=0;itr<5;itr++){
				if(grid[cl][itr]==2){
					grid[cl][itr] = 0;
				}
			}
			cl--;
		}
		
		int add = 0;
		if(sPos!=0){	//moving left
			add = (grid[clvl][sPos-1]==1)?1:0;
			backtrack(grid, clvl-1, sPos-1, 0, coins+add);
		}
		add = (grid[clvl][sPos]==1)?1:0; //not moving
		backtrack(grid, clvl-1, sPos, 0, coins+add);
		if(sPos!=4){	//moving right
			add = (grid[clvl][sPos+1]==1)?1:0;
			backtrack(grid, clvl-1, sPos+1, 0, coins+add);
		}
		
	}
	
	
	int add = 0;
	if(sPos!=0){	//move left
		add = (grid[clvl][sPos-1]==1)?1:0;
		backtrack(grid, clvl-1, sPos-1, bomb, coins+add);
	}
	add = (grid[clvl][sPos]==1)?1:0;	//stay still
	backtrack(grid, clvl-1, sPos, bomb, coins+add);
	if(sPos!=4){	// move right
		add = (grid[clvl][sPos+1]==1)?1:0;
		backtrack(grid, clvl-1, sPos+1, bomb, coins+add);
	}
	
	
}

int main() {
	
	ios_base::sync_with_stdio(false);
     cin.tie(NULL);
     cout.tie(NULL);
	
	int t = 1;
	
	// isc(t);
	cin>>t;
	while(t-->0){
		cin>>n;
		int grid[n][5];
		for(int i=0;i<n;i++){
			for(int j=0;j<5;j++){
				cin>>grid[i][j];
			}
		}
		ans = 0;
		backtrack(grid, n-1, 2, 1, 0);
		cout<<ans<<endl;
	}
	
	return 0;
}

/* CPP */